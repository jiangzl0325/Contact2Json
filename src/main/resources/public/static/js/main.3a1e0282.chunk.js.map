{"version":3,"sources":["ContactEditView.js","JsonEditView.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","ContactEditView","_this","this","react","disabled","props","allowClear","defaultValue","className","rows","value","contactText","onChange","e","contactChange","target","React","JsonEditView","JsonEditView_TextArea","jsonText","jsonChange","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","handleClick","isloading","axios","get","encodeURI","state","then","response","console","log","data","content","setTimeout","JSON","stringify","parse","_this2","spin","tip","ContactEditView_ContactEditView","es_button","style","margin","onClick","JsonEditView_JsonEditView","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAIQA,eAEaC,mLACV,IAAAC,EAAAC,KACP,OACEC,EAAA,cAACJ,EAAD,CACEK,SAAYF,KAAKG,MAAMD,SACvBE,YAAc,EACdC,aAAe,8IACfC,UAAU,oBACVC,KAAM,GACNC,MAAOR,KAAKG,MAAMM,YAClBC,SAAU,SAAAC,GACRZ,EAAKI,MAAMS,cAAcD,EAAEE,OAAOL,iBAXCM,aCFrCjB,eAEakB,mLACV,IAAAhB,EAAAC,KACP,OACEC,EAAA,cAACe,EAAD,CACEd,SAAUF,KAAKG,MAAMD,SACrBE,YAAY,EACZE,UAAU,qBACVC,KAAM,GACNC,MAAOR,KAAKG,MAAMc,SAClBP,SAAU,SAAAC,GACRZ,EAAKI,MAAMe,WAAWP,EAAEE,OAAOL,iBAVCM,8BCErBK,cACnB,SAAAA,EAAYhB,GAAO,IAAAJ,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAApB,KAAAmB,IACjBpB,EAAAqB,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAxB,KAAMG,KAyBRS,cAAgB,SAAAD,GACdZ,EAAK0B,SAAS,CAAEhB,YAAaE,KA3BZZ,EA8BnBmB,WAAa,SAAAP,GACXZ,EAAK0B,SAAS,CAAER,SAAUN,KA/BTZ,EAkCnB2B,YAAc,SAAAf,GACZZ,EAAK0B,SAAS,CAAEE,WAAW,IAE3BC,IAAMC,IAAIC,UAAU,gDAAgD/B,EAAKgC,MAAMtB,cAAcuB,KAAK,SAACC,GACjGC,QAAQC,IAAIF,EAASG,MACrBrC,EAAK0B,SAAS,CAACR,SAASgB,EAASG,KAAKC,UACtCC,WAAW,WACTvC,EAAK0B,SAAS,CAAEE,WAAW,IAC3B5B,EAAK0B,SAAS,CACZR,SAAUsB,KAAKC,UAAUD,KAAKE,MAAM1C,EAAKgC,MAAMd,UAAW,KAAM,MAEjE,QA3CLlB,EAAKgC,MAAQ,CACXtB,YAAW,qlBAkBXQ,SAAU,GACVU,WAAW,GAtBI5B,wEAkDV,IAAA2C,EAAA1C,KACP,OACEC,EAAA,qBAAKK,UAAU,OACbL,EAAA,mBAAGK,UAAU,cACVN,KAAK+B,MAAMJ,UAAY1B,EAAA,cAAA0C,EAAA,GAAMC,IAAI,eAAkB,KADtD,wDAKA3C,EAAA,sBAAMK,UAAU,gBACdL,EAAA,cAAC4C,EAAD,CAEEpC,YAAaT,KAAK+B,MAAMtB,YACxBG,cAAeZ,KAAKY,gBAEtBX,EAAA,cAAA6C,EAAA,GAAQC,MAAO,CAAEC,OAAQ,IAAMC,QAAS,SAAAtC,GAAC,OAAI+B,EAAKhB,YAAYf,KAA9D,gBAGAV,EAAA,cAACiD,EAAD,CAEEjC,SAAUjB,KAAK+B,MAAMd,SACrBC,WAAYlB,KAAKkB,sBAvEIJ,aCIbqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.3a1e0282.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./App.css\";\nimport { Input } from \"antd\";\n\nconst { TextArea } = Input;\n\nexport default class ContactEditView extends React.Component {\n  render() {\n    return (\n      <TextArea\n        disabled = {this.props.disabled}\n        allowClear = {true}\n        defaultValue = '{\"message_parent\":{\"parent_child\":{\"child_string\":\"child_string\",\"child_integer\":1}},\"message_string\":\"message_string\",\"message_integer\":1}'\n        className=\"Home-content-left\"\n        rows={20}\n        value={this.props.contactText}\n        onChange={e => {\n          this.props.contactChange(e.target.value);\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { Input } from \"antd\";\n\nconst { TextArea } = Input;\n\nexport default class JsonEditView extends React.Component {\n  render() {\n    return (\n      <TextArea\n        disabled={this.props.disabled}\n        allowClear={true}\n        className=\"Home-content-right\"\n        rows={20}\n        value={this.props.jsonText}\n        onChange={e => {\n          this.props.jsonChange(e.target.value);\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { Button, Spin } from \"antd\";\nimport ContactEditView from \"./ContactEditView\";\nimport JsonEditView from \"./JsonEditView\";\nimport axios from 'axios'\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contactText:\n        `class CityInfo{\n          /* 城市id */\n          int cityId;\n          /* 城市图片url */\n          string imageUrl;\n          /* 城市详情跳转链接 */\n          string districtUrl;\n          /* need to know 跳转链接 */\n          string needToKnowUrl;\n      }\n      \n      class GetCitySimpleInfoResponseType{\n          BaijiCommonTypes.ResponseStatusType responseStatus;\n          BaijiIbuCommonTypes.ResponseHead responseHead;\n          /* 图片链接 */\n          list<CityInfo> infos;\n      }`,\n      jsonText: \"\",\n      isloading: false\n    };\n  }\n\n  contactChange = e => {\n    this.setState({ contactText: e });\n  };\n\n  jsonChange = e => {\n    this.setState({ jsonText: e });\n  };\n\n  handleClick = e => {\n    this.setState({ isloading: true });\n\n    axios.get(encodeURI(\"http://localhost:8080/contract2json?contract=\"+this.state.contactText)).then((response) => {\n      console.log(response.data);\n      this.setState({jsonText:response.data.content})\n      setTimeout(() => {\n        this.setState({ isloading: false });\n        this.setState({\n          jsonText: JSON.stringify(JSON.parse(this.state.jsonText), null, 4)\n        });\n      }, 500);\n    });\n    \n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"App-header\">\n          {this.state.isloading ? <Spin tip=\"Loading...\" /> : null}\n          契约转换mock报文工具\n        </p>\n\n        <body className=\"Home-content\">\n          <ContactEditView\n            // disabled={this.state.isloading}\n            contactText={this.state.contactText}\n            contactChange={this.contactChange}\n          />\n          <Button style={{ margin: 10 }} onClick={e => this.handleClick(e)}>\n            转换\n          </Button>\n          <JsonEditView\n            // disabled={this.state.isloading}\n            jsonText={this.state.jsonText}\n            jsonChange={this.jsonChange}\n          />\n        </body>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}