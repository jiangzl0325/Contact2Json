{"version":3,"sources":["ContactEditView.js","JsonEditView.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","ContactEditView","_this","this","react","disabled","props","className","rows","value","contactText","onChange","e","contactChange","target","React","JsonEditView","JsonEditView_TextArea","allowClear","jsonText","jsonChange","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","handleClick","isloading","state","_this2","spin","tip","ContactEditView_ContactEditView","es_button","style","margin","onClick","JsonEditView_JsonEditView","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OAIQA,eAEaC,mLACV,IAAAC,EAAAC,KACP,OACEC,EAAA,cAACJ,EAAD,CACEK,SAAYF,KAAKG,MAAMD,SACvBE,UAAU,oBACVC,KAAM,GACNC,MAAON,KAAKG,MAAMI,YAClBC,SAAU,SAAAC,GACRV,EAAKI,MAAMO,cAAcD,EAAEE,OAAOL,iBATCM,aCFrCf,eAEagB,mLACV,IAAAd,EAAAC,KACP,OACEC,EAAA,cAACa,EAAD,CACEZ,SAAUF,KAAKG,MAAMD,SACrBa,YAAY,EACZX,UAAU,qBACVC,KAAM,GACNC,MAAON,KAAKG,MAAMa,SAClBR,SAAU,SAAAC,GACRV,EAAKI,MAAMc,WAAWR,EAAEE,OAAOL,iBAVCM,aCArBM,cACnB,SAAAA,EAAYf,GAAO,IAAAJ,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACjBnB,EAAAoB,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,KAAMG,KAIRO,cAAgB,SAAAD,GACdV,EAAKyB,SAAS,CAAEjB,YAAaE,KANZV,EASnBkB,WAAa,SAAAR,GACXV,EAAKyB,SAAS,CAAER,SAAUP,KAVTV,EAanB0B,YAAc,SAAAhB,GACZV,EAAKyB,SAAS,CAAEE,WAAW,KAZ3B3B,EAAK4B,MAAQ,CAAEpB,YAAa,GAAIS,SAAU,GAAIU,WAAW,GAFxC3B,wEAiBV,IAAA6B,EAAA5B,KACP,OACEC,EAAA,qBAAKG,UAAU,OACbH,EAAA,mBAAGG,UAAU,cACVJ,KAAK2B,MAAMD,UAAYzB,EAAA,cAAA4B,EAAA,GAAMC,IAAI,eAAkB,KADtD,wDAKA7B,EAAA,sBAAMG,UAAU,gBACdH,EAAA,cAAC8B,EAAD,CAEExB,YAAaP,KAAK2B,MAAMpB,YACxBG,cAAeV,KAAKU,gBAEtBT,EAAA,cAAA+B,EAAA,GAAQC,MAAO,CAAEC,OAAQ,IAAMC,QAAS,SAAA1B,GAAC,OAAImB,EAAKH,YAAYhB,KAA9D,gBAGAR,EAAA,cAACmC,EAAD,CAEEpB,SAAUhB,KAAK2B,MAAMX,SACrBC,WAAYjB,KAAKiB,sBAtCIL,aCMbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.54ea3141.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./App.css\";\nimport { Input } from \"antd\";\n\nconst { TextArea } = Input;\n\nexport default class ContactEditView extends React.Component {\n  render() {\n    return (\n      <TextArea\n        disabled = {this.props.disabled}\n        className=\"Home-content-left\"\n        rows={20}\n        value={this.props.contactText}\n        onChange={e => {\n          this.props.contactChange(e.target.value);\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { Input } from \"antd\";\n\nconst { TextArea } = Input;\n\nexport default class JsonEditView extends React.Component {\n  render() {\n    return (\n      <TextArea\n        disabled={this.props.disabled}\n        allowClear={true}\n        className=\"Home-content-right\"\n        rows={20}\n        value={this.props.jsonText}\n        onChange={e => {\n          this.props.jsonChange(e.target.value);\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport \"./App.css\";\nimport { Button, Spin } from \"antd\";\nimport ContactEditView from \"./ContactEditView\";\nimport JsonEditView from \"./JsonEditView\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { contactText: \"\", jsonText: \"\", isloading: false };\n  }\n\n  contactChange = e => {\n    this.setState({ contactText: e });\n  };\n\n  jsonChange = e => {\n    this.setState({ jsonText: e });\n  };\n\n  handleClick = e => {\n    this.setState({ isloading: true });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"App-header\">\n          {this.state.isloading ? <Spin tip=\"Loading...\" /> : null}\n          契约转换mock报文工具\n        </p>\n\n        <body className=\"Home-content\">\n          <ContactEditView\n            // disabled={this.state.isloading}\n            contactText={this.state.contactText}\n            contactChange={this.contactChange}\n          />\n          <Button style={{ margin: 10 }} onClick={e => this.handleClick(e)}>\n            转换\n          </Button>\n          <JsonEditView\n            // disabled={this.state.isloading}\n            jsonText={this.state.jsonText}\n            jsonChange={this.jsonChange}\n          />\n        </body>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}